{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst anecdotesAtStart = ['If it hurts, do it more often', 'Adding manpower to a late software project makes it later!', 'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.', 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.', 'Premature optimization is the root of all evil.', 'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'];\nconst getId = () => (100000 * Math.random()).toFixed(0);\nconst asObject = anecdote => {\n  return {\n    content: anecdote,\n    id: getId(),\n    votes: 0\n  };\n};\nconst initialState = anecdotesAtStart.map(asObject);\nexport const newWords = words => {\n  return {\n    type: 'NEW_PHRASE',\n    payload: {\n      content: words,\n      id: getId(),\n      votes: 0\n    }\n  };\n};\nexport const toAddVote = id => {\n  return {\n    type: 'ADD_VOTE',\n    payload: id\n  };\n};\nconst wordSlice = createSlice({\n  name: 'phrases',\n  initialState,\n  reducers: {\n    addVote(state, action) {\n      console.log(JSON.parse(JSON.stringify(state)), 'is state in addVote in wordSlice');\n      const id = action.payload;\n      console.log(id, 'is action payload in add vote');\n    }\n  }\n});\nexport const anecdoteReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  //console.log('state now: ', state)\n  //console.log('action', action)\n  switch (action.type) {\n    case 'ADD_VOTE':\n      //console.log('we are supposed to add vote here')\n      const id = action.payload;\n      console.log(id, 'is action payload in add vote');\n      const phraseToChange = state.find(word => word.id === id);\n      //console.log(phraseToChange, 'is phrase to change')\n      const changedPhrase = {\n        ...phraseToChange,\n        votes: phraseToChange.votes += 1\n      };\n\n      //console.log(changedPhrase, 'is changed phrases')\n      //const testing = state.map((words) => words.id !== id ? words : changedPhrase)\n      //console.log(testing, 'is testing')\n\n      return state.map(words => words.id !== id ? words : changedPhrase);\n    case 'NEW_PHRASE':\n      console.log('we are in new phrase');\n      console.log(action.payload, 'is action payload in new phrase');\n      return state.concat(action.payload);\n    default:\n      return state;\n  }\n};\nexport const {\n  addVote\n} = wordSlice.actions;\nexport default wordSlice.reducer;","map":{"version":3,"names":["createSlice","anecdotesAtStart","getId","Math","random","toFixed","asObject","anecdote","content","id","votes","initialState","map","newWords","words","type","payload","toAddVote","wordSlice","name","reducers","addVote","state","action","console","log","JSON","parse","stringify","anecdoteReducer","phraseToChange","find","word","changedPhrase","concat","actions","reducer"],"sources":["C:/Users/bilstr/Documents/GitHub/part6/anecdotes-redux-part6/src/reducers/anecdoteReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst anecdotesAtStart = [\r\n  'If it hurts, do it more often',\r\n  'Adding manpower to a late software project makes it later!',\r\n  'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\r\n  'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\r\n  'Premature optimization is the root of all evil.',\r\n  'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\r\n]\r\n\r\nconst getId = () => (100000 * Math.random()).toFixed(0)\r\n\r\nconst asObject = (anecdote) => {\r\n  return {\r\n    content: anecdote,\r\n    id: getId(),\r\n    votes: 0\r\n  }\r\n}\r\n\r\nconst initialState = anecdotesAtStart.map(asObject)\r\n\r\nexport const newWords = (words) => {\r\n  return {\r\n    type: 'NEW_PHRASE',\r\n    payload: {\r\n      content: words,\r\n      id: getId(),\r\n      votes: 0\r\n      }\r\n  }\r\n}\r\n\r\nexport const toAddVote = (id) => {\r\n    return { type: 'ADD_VOTE', payload: id}\r\n  }\r\n\r\nconst wordSlice = createSlice({\r\n  name: 'phrases',\r\n  initialState,\r\n  reducers: {\r\n    addVote(state, action){\r\n      console.log(JSON.parse(JSON.stringify(state)), 'is state in addVote in wordSlice')\r\n      const id = action.payload\r\n      console.log(id, 'is action payload in add vote')\r\n    }\r\n  }\r\n})\r\n\r\n\r\nexport const anecdoteReducer = (state = initialState, action) => {\r\n  //console.log('state now: ', state)\r\n  //console.log('action', action)\r\n  switch (action.type) {\r\n  case 'ADD_VOTE':\r\n    //console.log('we are supposed to add vote here')\r\n    const id = action.payload\r\n    console.log(id, 'is action payload in add vote')\r\n    \r\n    \r\n    const phraseToChange = state.find((word) => word.id === id)\r\n    //console.log(phraseToChange, 'is phrase to change')\r\n    const changedPhrase = {\r\n      ...phraseToChange,\r\n      votes: phraseToChange.votes += 1\r\n    }\r\n    \r\n    //console.log(changedPhrase, 'is changed phrases')\r\n    //const testing = state.map((words) => words.id !== id ? words : changedPhrase)\r\n    //console.log(testing, 'is testing')\r\n    \r\n    return state.map((words) => words.id !== id ? words : changedPhrase)\r\n  case 'NEW_PHRASE':\r\n    console.log('we are in new phrase')\r\n    console.log(action.payload, 'is action payload in new phrase')\r\n    return state.concat(action.payload)\r\n  default:\r\n    return state\r\n  }\r\n}\r\n\r\nexport const { addVote } = wordSlice.actions\r\nexport default wordSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,gBAAgB,GAAG,CACvB,+BAA+B,EAC/B,4DAA4D,EAC5D,8LAA8L,EAC9L,iHAAiH,EACjH,iDAAiD,EACjD,oLAAoL,CACrL;AAED,MAAMC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAGC,IAAI,CAACC,MAAM,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAC;AAEvD,MAAMC,QAAQ,GAAIC,QAAQ,IAAK;EAC7B,OAAO;IACLC,OAAO,EAAED,QAAQ;IACjBE,EAAE,EAAEP,KAAK,EAAE;IACXQ,KAAK,EAAE;EACT,CAAC;AACH,CAAC;AAED,MAAMC,YAAY,GAAGV,gBAAgB,CAACW,GAAG,CAACN,QAAQ,CAAC;AAEnD,OAAO,MAAMO,QAAQ,GAAIC,KAAK,IAAK;EACjC,OAAO;IACLC,IAAI,EAAE,YAAY;IAClBC,OAAO,EAAE;MACPR,OAAO,EAAEM,KAAK;MACdL,EAAE,EAAEP,KAAK,EAAE;MACXQ,KAAK,EAAE;IACP;EACJ,CAAC;AACH,CAAC;AAED,OAAO,MAAMO,SAAS,GAAIR,EAAE,IAAK;EAC7B,OAAO;IAAEM,IAAI,EAAE,UAAU;IAAEC,OAAO,EAAEP;EAAE,CAAC;AACzC,CAAC;AAEH,MAAMS,SAAS,GAAGlB,WAAW,CAAC;EAC5BmB,IAAI,EAAE,SAAS;EACfR,YAAY;EACZS,QAAQ,EAAE;IACRC,OAAO,CAACC,KAAK,EAAEC,MAAM,EAAC;MACpBC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACN,KAAK,CAAC,CAAC,EAAE,kCAAkC,CAAC;MAClF,MAAMb,EAAE,GAAGc,MAAM,CAACP,OAAO;MACzBQ,OAAO,CAACC,GAAG,CAAChB,EAAE,EAAE,+BAA+B,CAAC;IAClD;EACF;AACF,CAAC,CAAC;AAGF,OAAO,MAAMoB,eAAe,GAAG,YAAkC;EAAA,IAAjCP,KAAK,uEAAGX,YAAY;EAAA,IAAEY,MAAM;EAC1D;EACA;EACA,QAAQA,MAAM,CAACR,IAAI;IACnB,KAAK,UAAU;MACb;MACA,MAAMN,EAAE,GAAGc,MAAM,CAACP,OAAO;MACzBQ,OAAO,CAACC,GAAG,CAAChB,EAAE,EAAE,+BAA+B,CAAC;MAGhD,MAAMqB,cAAc,GAAGR,KAAK,CAACS,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACvB,EAAE,KAAKA,EAAE,CAAC;MAC3D;MACA,MAAMwB,aAAa,GAAG;QACpB,GAAGH,cAAc;QACjBpB,KAAK,EAAEoB,cAAc,CAACpB,KAAK,IAAI;MACjC,CAAC;;MAED;MACA;MACA;;MAEA,OAAOY,KAAK,CAACV,GAAG,CAAEE,KAAK,IAAKA,KAAK,CAACL,EAAE,KAAKA,EAAE,GAAGK,KAAK,GAAGmB,aAAa,CAAC;IACtE,KAAK,YAAY;MACfT,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnCD,OAAO,CAACC,GAAG,CAACF,MAAM,CAACP,OAAO,EAAE,iCAAiC,CAAC;MAC9D,OAAOM,KAAK,CAACY,MAAM,CAACX,MAAM,CAACP,OAAO,CAAC;IACrC;MACE,OAAOM,KAAK;EAAA;AAEhB,CAAC;AAED,OAAO,MAAM;EAAED;AAAQ,CAAC,GAAGH,SAAS,CAACiB,OAAO;AAC5C,eAAejB,SAAS,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}